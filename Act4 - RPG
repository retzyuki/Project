> RPG Class <

public class RPG {
    
    public static void main(String[] args) {
        TestCharacter t = new TestCharacter();
    }
}



> Dice Class <

import java.util.Random;

public class Dice {
    
    private Random r;
    public Dice() {
        this.r = new Random();
    }

    public int roll(){
        int num = r.nextInt(6) + 1;
        return num;
    }
}



> Character Class <

public class Character {

    static Dice dice = new Dice();
    
    private String name;
    private int strength;
    private int dexterity;
    private int intelligence;
    private int maxLife;
    private int currentLife;
    
    /**
     * Constructor takes 4 parameters: n,s,d,i and assigns them to instance
     * variables name, strength, dexterity, intelligence. Also uses the dice
     * instance to assign a random number to maxlife. currentlife is initialized
     * to maxlife
     */
    public Character(String n, int s, int d, int i) {
        this.name = n;
        this.strength = s;
        this.dexterity = d;
        this.intelligence = i;
        this.maxLife = dice.roll()*4;
        this.currentLife = this.maxLife;
    }

    /**
     * Returns a random die roll using the roll method in the Dice.java,
     * *modified by the character's strength
     */
    public int attack() {
        return dice.roll()+this.strength;
    }

    /**
     * Decreases currentlife by the damage parameter
     */
    public void wound(int damage) {
        this.currentLife -= damage;
    }

    /**
     * Increases currentlife by the heal parameter. currentlife cannot be
     * greater than maxlife
     */
    public void heal(int heal) {
        if(this.currentLife + heal <= this.maxLife){
            this.currentLife += heal;
        }
        else{
            this.currentLife = this.maxLife;
        }
    }

    /**
     * Returns name
     */
    public String getName() {
        return this.name;
    }

    /**
     * Returns strength
     */
    public int getStrength() {
        return this.strength;
    }

    /**
     * Returns dexterity
     */
    public int getDexterity() {
        return this.dexterity;
    }
    
    /**
     * Returns intelligence
     */
    public int getIntelligence() {
        return this.intelligence;
    }

    /**
     * Returns currentlife
     */
    public int getCurrentLife() {
        return this.currentLife;
    }

    /**
     * Returns maxlife
     */
    public int getMaxLife() {
        return this.maxLife;
    }
    
    /**
     * Sets name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Sets strength
     */
    public void setStrength(int str) {
        this.strength = str;
    }

    /**
     * Sets dexterity
     */
    public void setDexterity(int dex) {
        this.dexterity = dex;
    }
    
    /**
     * Sets intelligence
     */
    public void setIntelligence(int intel) {
        this.intelligence = intel;
    }

    /**
     * Sets currentlife
     */
    public void setCurrentLife(int hp) {
        this.currentLife = hp;
    }

    /**
     * Sets maxlife
     */
    public void setMaxLife(int maxHp) {
        this.maxLife = maxHp;
    }
}



> TestCharacter Class <

public class TestCharacter {
    
    public TestCharacter(){
        Character p1 = new Character("Joe", 2, 0, 6);
        Character p2 = new Character("Bob", 6, 0, 2);
        
        for(int i = 1; i <= 3; i++){
            System.out.println();
            System.out.println("Round "+i);
            System.out.println(p1.getName()+": "+p1.getCurrentLife());
            System.out.println(p2.getName()+": "+p2.getCurrentLife());
            int damage1 = p1.attack(), damage2 = p2.attack();
            System.out.println(p1.getName()+" attacks "+p2.getName()+" for "+damage1);
            System.out.println(p2.getName()+" attacks "+p1.getName()+" for "+damage2);
            p2.wound(damage1);
            p1.wound(damage2);
            System.out.println();
            
            if(p1.getCurrentLife() <= 0){
                if (p2.getCurrentLife() > 0) 
                System.out.println(p2.getName()+" wins with " + p2.getCurrentLife() + " hp");
                
                else if (p2.getCurrentLife() <= 0)
                System.out.println(p2.getName()+" wins with 0 hp");
                break; 
            }
            if(p2.getCurrentLife() <= 0){
                if (p1.getCurrentLife() > 0)
                System.out.println(p1.getName()+" wins with " + p1.getCurrentLife() + " hp");
                
                else if (p1.getCurrentLife() <= 0)
                System.out.println(p1.getName()+" wins with 0 hp");
                break;
        }
    }
}
}
